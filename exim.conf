domainlist  local_domains    = ${env{LOCAL_DOMAINS}{$value}{@}}
domainlist  relay_to_domains = ${env{RELAY_TO_DOMAINS}{$value}{}}
addresslist relay_to_users   = ${env{RELAY_TO_USERS}{$value}{}}
hostlist    relay_from_hosts = ${env{RELAY_FROM_HOSTS}{$value}{}}
acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data
tls_advertise_hosts =
daemon_smtp_ports = 8025
never_users = root
prdr_enable = true
log_selector = +smtp_protocol_error +smtp_syntax_error \
  +tls_certificate_verified
ignore_bounce_errors_after = 2d
timeout_frozen_after = 7d
keep_environment = LOCAL_DOMAINS : RELAY_FROM_HOSTS : RELAY_TO_DOMAINS : RELAY_TO_USERS : SMARTHOST : SMTP_PASSWORD : SMTP_USERDOMAIN : SMTP_USERNAME
begin acl
acl_check_rcpt:
  accept  hosts = :
          control = dkim_disable_verify
  deny    message       = Restricted characters in address
          domains       = +local_domains
          local_parts   = ^[.] : ^.*[@%!/|]
  deny    message       = Restricted characters in address
          domains       = !+local_domains
          local_parts   = ^[./|] : ^.*[@%!] : ^.*/\\.\\./
  accept  local_parts   = postmaster
          domains       = +local_domains
  require verify        = sender
  accept  hosts         = +relay_from_hosts
          domains       = +relay_to_domains
          control       = dkim_disable_verify
  accept  hosts         = +relay_from_hosts
          recipients    = +relay_to_users
          control       = dkim_disable_verify
  accept  authenticated = *
          control       = dkim_disable_verify
  require message = nice hosts say HELO first
          condition = ${if def:sender_helo_name}
  require message = relay not permitted
          domains = +local_domains
  require verify = recipient
  accept
acl_check_data:
  deny    message    = maximum allowed line length is 998 octets, \
                       got $max_received_linelength
          condition  = ${if > {$max_received_linelength}{998}}
  accept
begin routers
dnslookup:
  driver = dnslookup
  domains = ! +local_domains
  transport = remote_smtp
  ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; ::1
  condition = ${if eq{${env{SMARTHOST}{$value}{}}}{}}
  no_more
smarthost:
  driver = manualroute
  domains = ! +local_domains
  transport = remote_smtp
  route_data = ${env{SMARTHOST}{$value}{smarthost}}
  ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; ::1
  condition = ${if !eq{${env{SMARTHOST}{$value}{}}}{}}
  no_more
system_aliases:
  driver = redirect
  allow_fail
  allow_defer
  data = ${lookup{$local_part}lsearch{/etc/mail/aliases}}
  file_transport = address_file
  pipe_transport = address_pipe
userforward:
  driver = redirect
  check_local_user
  file = $home/.forward
  no_verify
  no_expn
  check_ancestor
  file_transport = address_file
  pipe_transport = address_pipe
  reply_transport = address_reply
localuser:
  driver = accept
  check_local_user
  transport = local_delivery
  cannot_route_message = Unknown user
begin transports
remote_smtp:
  driver = smtp
  message_size_limit = ${if > {$max_received_linelength}{998} {1}{0}}
  hosts_require_auth = ${if or{ {exists{/run/secrets/SMTP_PASSWORD}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {*} {}}
local_delivery:
  driver = appendfile
  file = /var/mail/$local_part
  delivery_date_add
  envelope_to_add
  return_path_add
address_pipe:
  driver = pipe
  return_output
address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add
address_reply:
  driver = autoreply
begin retry
*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h
begin rewrite
begin authenticators
LOGIN:
  driver           = plaintext
  public_name      = LOGIN
  client_send      = ": ${env{SMTP_USERNAME}{$value} fail } : ${if exists{/run/secrets/passwd/SMTP_PASSWORD} {${readfile{/run/secrets/passwd/SMTP_PASSWORD}}} {${env{SMTP_PASSWORD}{$value}fail}} }"
  client_condition = ${if or{ {exists{/run/secrets/passwd/SMTP_PASSWORD}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}
PLAIN:
  driver           = plaintext
  public_name      = PLAIN
  client_send      = "^${env{SMTP_USERNAME}{$value} fail }^${if exists{/run/secrets/passwd/SMTP_PASSWORD} {${readfile{/run/secrets/passwd/SMTP_PASSWORD}}} {${env{SMTP_PASSWORD}{$value}fail}} }"
  client_condition = ${if or{ {exists{/run/secrets/passwd/SMTP_PASSWORD}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}
NTLM:
  driver = spa
  client_username  = ${env{SMTP_USERNAME}{$value} fail }
  client_password  = ${if exists{/run/secrets/passwd/SMTP_PASSWORD} {${readfile{/run/secrets/passwd/SMTP_PASSWORD}}} {${env{SMTP_PASSWORD}{$value}{}}} }
  client_domain    = ${env{SMTP_USERDOMAIN}{$value} {} }
  client_condition = ${if or{ {exists{/run/secrets/passwd/SMTP_PASSWORD}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}
